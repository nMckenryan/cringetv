// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tv_show {
    tvdb_id                 Int               @id @unique @default(autoincrement())
    name                    String
    description             String
    content_rating_id       Int
    content_rating          Content_ratings[]
    aggregate_cringe_rating Float
    reviews                 Review[]
    first_air_date          DateTime
    final_air_date          DateTime?         @db.Date
    series_status           String
    poster_link             String?           @db.VarChar(255)
    genre                   Genre[]
    original_country        String
}

model Review {
    review_id         Int     @id @default(autoincrement())
    review_content    String
    userId            String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    tvdb_id           Int
    tv_show           Tv_show @relation(fields: [tvdb_id], references: [tvdb_id], onDelete: Cascade)
    cringe_score_vote Int
    review_rating     Int
}

model Genre {
    genre_id   Int      @id
    genre_name String
    Tv_show    Tv_show? @relation(fields: [tvdb_id], references: [tvdb_id])
    tvdb_id    Int?
}

model Content_ratings {
    content_rating_id          Int      @id
    content_rating             String
    rating_country             String
    content_rating_description String
    Tv_show                    Tv_show? @relation(fields: [tvdb_id], references: [tvdb_id])
    tvdb_id                    Int?
}
