// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  dateCreated   DateTime  @default(now())
  userBio       String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Genre {
  genre_id        Int              @id @unique
  genre_name      String           @unique
  TelevisionShows TelevisionShow[]
}

model TelevisionShow {
  tvdb_id                 Int             @id @unique
  name                    String
  description             String?
  aggregate_cringe_rating Float?
  first_air_date          DateTime
  last_air_date           DateTime?       @db.Date
  series_status           String?
  poster_link             String?         @db.VarChar(255)
  genres                  Genre[]
  original_country        String
  content_ratings         ContentRating[]
  reviews                 Review[]

  @@index([tvdb_id], map: "tvdb_id_idx")
}

model ContentRating {
  content_rating_id          Int              @id @unique
  content_rating             String
  rating_country             String
  content_rating_description String
  televisionShows            TelevisionShow[]
}

model Review {
  review_id         Int            @id @default(autoincrement())
  review_content    String
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tvdb_id           Int
  televisionShow    TelevisionShow @relation(fields: [tvdb_id], references: [tvdb_id], onDelete: Cascade)
  cringe_score_vote Int
  date_created      DateTime
  date_updated      DateTime?

  @@unique([userId, tvdb_id])
}
